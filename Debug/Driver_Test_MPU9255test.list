
Driver_Test_MPU9255test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003010  08003010  00013010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003030  08003030  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003038  08003038  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000000b8  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b064  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017d1  00000000  00000000  0002b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b0  00000000  00000000  0002d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000227ee  00000000  00000000  0002da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c270  00000000  00000000  00050246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41e5  00000000  00000000  0005c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013069b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025b0  00000000  00000000  001306ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002ff8 	.word	0x08002ff8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08002ff8 	.word	0x08002ff8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f6:	f000 fb4d 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f833 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fe:	f000 f8d1 	bl	80006a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000502:	f000 f88f 	bl	8000624 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000506:	f000 fb01 	bl	8000b0c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t Data = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
  //array de characteres
  uint8_t arr1[2] = {'0','\0'};
 800050e:	2330      	movs	r3, #48	; 0x30
 8000510:	80bb      	strh	r3, [r7, #4]

  while (1)
  {
	  HAL_I2C_Mem_Read(&hi2c1, SlaveAddress, RegAddress, sizeof(uint8_t), &Data, sizeof(uint8_t), 100);
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <main+0x64>)
 8000514:	8819      	ldrh	r1, [r3, #0]
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <main+0x68>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	b29a      	uxth	r2, r3
 800051c:	2364      	movs	r3, #100	; 0x64
 800051e:	9302      	str	r3, [sp, #8]
 8000520:	2301      	movs	r3, #1
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	9300      	str	r3, [sp, #0]
 8000528:	2301      	movs	r3, #1
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <main+0x6c>)
 800052c:	f000 ffb8 	bl	80014a0 <HAL_I2C_Mem_Read>
	  arr1[0] = Data;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	713b      	strb	r3, [r7, #4]
	  //usar esto para mandar datos a la uart
	  uartSendString(arr1);
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fb12 	bl	8000b60 <uartSendString>
	  HAL_Delay(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f000 fb9a 	bl	8000c78 <HAL_Delay>
	  uartSendString("test");
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <main+0x70>)
 8000546:	f000 fb0b 	bl	8000b60 <uartSendString>
	  HAL_Delay(1000);
 800054a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054e:	f000 fb93 	bl	8000c78 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, SlaveAddress, RegAddress, sizeof(uint8_t), &Data, sizeof(uint8_t), 100);
 8000552:	e7de      	b.n	8000512 <main+0x22>
 8000554:	20000000 	.word	0x20000000
 8000558:	20000002 	.word	0x20000002
 800055c:	2000002c 	.word	0x2000002c
 8000560:	08003010 	.word	0x08003010

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fd38 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b23      	ldr	r3, [pc, #140]	; (800061c <SystemClock_Config+0xb8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a22      	ldr	r2, [pc, #136]	; (800061c <SystemClock_Config+0xb8>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b20      	ldr	r3, [pc, #128]	; (800061c <SystemClock_Config+0xb8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <SystemClock_Config+0xbc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <SystemClock_Config+0xbc>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <SystemClock_Config+0xbc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	2302      	movs	r3, #2
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2310      	movs	r3, #16
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fc87 	bl	8001eec <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005e4:	f000 f96e 	bl	80008c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fee9 	bl	80023dc <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000610:	f000 f958 	bl	80008c4 <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <MX_I2C1_Init+0x74>)
 800062a:	4a1c      	ldr	r2, [pc, #112]	; (800069c <MX_I2C1_Init+0x78>)
 800062c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800062e:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_I2C1_Init+0x74>)
 8000630:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <MX_I2C1_Init+0x7c>)
 8000632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_I2C1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_I2C1_Init+0x74>)
 8000642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_I2C1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_I2C1_Init+0x74>)
 8000662:	f000 fdd9 	bl	8001218 <HAL_I2C_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800066c:	f000 f92a 	bl	80008c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000670:	2100      	movs	r1, #0
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_I2C1_Init+0x74>)
 8000674:	f001 fbbe 	bl	8001df4 <HAL_I2CEx_ConfigAnalogFilter>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800067e:	f000 f921 	bl	80008c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_I2C1_Init+0x74>)
 8000686:	f001 fbf1 	bl	8001e6c <HAL_I2CEx_ConfigDigitalFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000690:	f000 f918 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000002c 	.word	0x2000002c
 800069c:	40005400 	.word	0x40005400
 80006a0:	00061a80 	.word	0x00061a80

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
 80006be:	4b7c      	ldr	r3, [pc, #496]	; (80008b0 <MX_GPIO_Init+0x20c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a7b      	ldr	r2, [pc, #492]	; (80008b0 <MX_GPIO_Init+0x20c>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b79      	ldr	r3, [pc, #484]	; (80008b0 <MX_GPIO_Init+0x20c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	4b75      	ldr	r3, [pc, #468]	; (80008b0 <MX_GPIO_Init+0x20c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a74      	ldr	r2, [pc, #464]	; (80008b0 <MX_GPIO_Init+0x20c>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b72      	ldr	r3, [pc, #456]	; (80008b0 <MX_GPIO_Init+0x20c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b6e      	ldr	r3, [pc, #440]	; (80008b0 <MX_GPIO_Init+0x20c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a6d      	ldr	r2, [pc, #436]	; (80008b0 <MX_GPIO_Init+0x20c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b6b      	ldr	r3, [pc, #428]	; (80008b0 <MX_GPIO_Init+0x20c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	4b67      	ldr	r3, [pc, #412]	; (80008b0 <MX_GPIO_Init+0x20c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a66      	ldr	r2, [pc, #408]	; (80008b0 <MX_GPIO_Init+0x20c>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b64      	ldr	r3, [pc, #400]	; (80008b0 <MX_GPIO_Init+0x20c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b60      	ldr	r3, [pc, #384]	; (80008b0 <MX_GPIO_Init+0x20c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a5f      	ldr	r2, [pc, #380]	; (80008b0 <MX_GPIO_Init+0x20c>)
 8000734:	f043 0308 	orr.w	r3, r3, #8
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b5d      	ldr	r3, [pc, #372]	; (80008b0 <MX_GPIO_Init+0x20c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0308 	and.w	r3, r3, #8
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b59      	ldr	r3, [pc, #356]	; (80008b0 <MX_GPIO_Init+0x20c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a58      	ldr	r2, [pc, #352]	; (80008b0 <MX_GPIO_Init+0x20c>)
 8000750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b56      	ldr	r3, [pc, #344]	; (80008b0 <MX_GPIO_Init+0x20c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f244 0181 	movw	r1, #16513	; 0x4081
 8000768:	4852      	ldr	r0, [pc, #328]	; (80008b4 <MX_GPIO_Init+0x210>)
 800076a:	f000 fd3b 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	4851      	ldr	r0, [pc, #324]	; (80008b8 <MX_GPIO_Init+0x214>)
 8000774:	f000 fd36 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	484b      	ldr	r0, [pc, #300]	; (80008bc <MX_GPIO_Init+0x218>)
 8000790:	f000 fb7c 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000794:	2332      	movs	r3, #50	; 0x32
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a0:	2303      	movs	r3, #3
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a4:	230b      	movs	r3, #11
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4843      	ldr	r0, [pc, #268]	; (80008bc <MX_GPIO_Init+0x218>)
 80007b0:	f000 fb6c 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007b4:	2386      	movs	r3, #134	; 0x86
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	483c      	ldr	r0, [pc, #240]	; (80008c0 <MX_GPIO_Init+0x21c>)
 80007d0:	f000 fb5c 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007d4:	f244 0381 	movw	r3, #16513	; 0x4081
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4831      	ldr	r0, [pc, #196]	; (80008b4 <MX_GPIO_Init+0x210>)
 80007ee:	f000 fb4d 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000800:	2303      	movs	r3, #3
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000804:	230b      	movs	r3, #11
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4829      	ldr	r0, [pc, #164]	; (80008b4 <MX_GPIO_Init+0x210>)
 8000810:	f000 fb3c 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000814:	2340      	movs	r3, #64	; 0x40
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4823      	ldr	r0, [pc, #140]	; (80008b8 <MX_GPIO_Init+0x214>)
 800082c:	f000 fb2e 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481d      	ldr	r0, [pc, #116]	; (80008b8 <MX_GPIO_Init+0x214>)
 8000844:	f000 fb22 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000848:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800085a:	230a      	movs	r3, #10
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4816      	ldr	r0, [pc, #88]	; (80008c0 <MX_GPIO_Init+0x21c>)
 8000866:	f000 fb11 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800086a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <MX_GPIO_Init+0x21c>)
 8000880:	f000 fb04 	bl	8000e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000884:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000896:	230b      	movs	r3, #11
 8000898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_GPIO_Init+0x214>)
 80008a2:	f000 faf3 	bl	8000e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	; 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40021800 	.word	0x40021800
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020000 	.word	0x40020000

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c8:	b672      	cpsid	i
}
 80008ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008cc:	e7fe      	b.n	80008cc <Error_Handler+0x8>
	...

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_MspInit+0x4c>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <HAL_MspInit+0x4c>)
 80008e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x4c>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x4c>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <HAL_I2C_MspInit+0x84>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d12c      	bne.n	800099c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a17      	ldr	r2, [pc, #92]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 800094c:	f043 0302 	orr.w	r3, r3, #2
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800095e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000964:	2312      	movs	r3, #18
 8000966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000970:	2304      	movs	r3, #4
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	480c      	ldr	r0, [pc, #48]	; (80009ac <HAL_I2C_MspInit+0x8c>)
 800097c:	f000 fa86 	bl	8000e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 800098a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_I2C_MspInit+0x88>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3728      	adds	r7, #40	; 0x28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40005400 	.word	0x40005400
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400

080009b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	; (8000a34 <HAL_UART_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12c      	bne.n	8000a2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <HAL_UART_MspInit+0x88>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_UART_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <HAL_UART_MspInit+0x8c>)
 8000a28:	f000 fa30 	bl	8000e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3728      	adds	r7, #40	; 0x28
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40004800 	.word	0x40004800
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020c00 	.word	0x40020c00

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f8d4 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <SystemInit+0x20>)
 8000a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <SystemInit+0x20>)
 8000aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad4:	4c0b      	ldr	r4, [pc, #44]	; (8000b04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae2:	f7ff ffd7 	bl	8000a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 fa5b 	bl	8002fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd01 	bl	80004f0 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000af0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000afc:	08003040 	.word	0x08003040
  ldr r2, =_sbss
 8000b00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b04:	200000c8 	.word	0x200000c8

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <MX_USART3_UART_Init>:
//prototipo
void MX_USART3_UART_Init(void);

//implementacion
void MX_USART3_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART3_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART3_UART_Init+0x4c>)
 8000b44:	f001 fe6a 	bl	800281c <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f7ff feb9 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000080 	.word	0x20000080
 8000b5c:	40004800 	.word	0x40004800

08000b60 <uartSendString>:

//Recorre el array y envía el contenido uno a uno hasta encontrar una \0
void uartSendString(uint8_t *pstring) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	do {
		HAL_UART_Transmit(&huart3, pstring, 1, 0xFFFF);
 8000b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <uartSendString+0x30>)
 8000b72:	f001 fea0 	bl	80028b6 <HAL_UART_Transmit>
		pstring++;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
	} while (*pstring != '\0');
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1f1      	bne.n	8000b68 <uartSendString+0x8>
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000080 	.word	0x20000080

08000b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <HAL_Init+0x40>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_Init+0x40>)
 8000baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_Init+0x40>)
 8000bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f931 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f808 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fe82 	bl	80008d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40023c00 	.word	0x40023c00

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x54>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x58>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f93b 	bl	8000e72 <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00e      	b.n	8000c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d80a      	bhi.n	8000c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f000 f911 	bl	8000e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_InitTick+0x5c>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	2000000c 	.word	0x2000000c
 8000c34:	20000008 	.word	0x20000008

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	2000000c 	.word	0x2000000c
 8000c5c:	200000c4 	.word	0x200000c4

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	200000c4 	.word	0x200000c4

08000c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c80:	f7ff ffee 	bl	8000c60 <HAL_GetTick>
 8000c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c90:	d005      	beq.n	8000c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_Delay+0x44>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9e:	bf00      	nop
 8000ca0:	f7ff ffde 	bl	8000c60 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d8f7      	bhi.n	8000ca0 <HAL_Delay+0x28>
  {
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000000c 	.word	0x2000000c

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff8e 	bl	8000d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff47 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff5c 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff8e 	bl	8000d78 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff5d 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffb0 	bl	8000de0 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	e177      	b.n	8001198 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f040 8166 	bne.w	8001192 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d005      	beq.n	8000ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d130      	bne.n	8000f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	2203      	movs	r2, #3
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68da      	ldr	r2, [r3, #12]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f14:	2201      	movs	r2, #1
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f003 0201 	and.w	r2, r3, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d017      	beq.n	8000f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 0303 	and.w	r3, r3, #3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d123      	bne.n	8000fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	69b9      	ldr	r1, [r7, #24]
 8000fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0203 	and.w	r2, r3, #3
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 80c0 	beq.w	8001192 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b66      	ldr	r3, [pc, #408]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a65      	ldr	r2, [pc, #404]	; (80011b0 <HAL_GPIO_Init+0x324>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <HAL_GPIO_Init+0x324>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800102e:	4a61      	ldr	r2, [pc, #388]	; (80011b4 <HAL_GPIO_Init+0x328>)
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a58      	ldr	r2, [pc, #352]	; (80011b8 <HAL_GPIO_Init+0x32c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d037      	beq.n	80010ca <HAL_GPIO_Init+0x23e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a57      	ldr	r2, [pc, #348]	; (80011bc <HAL_GPIO_Init+0x330>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d031      	beq.n	80010c6 <HAL_GPIO_Init+0x23a>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a56      	ldr	r2, [pc, #344]	; (80011c0 <HAL_GPIO_Init+0x334>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d02b      	beq.n	80010c2 <HAL_GPIO_Init+0x236>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a55      	ldr	r2, [pc, #340]	; (80011c4 <HAL_GPIO_Init+0x338>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d025      	beq.n	80010be <HAL_GPIO_Init+0x232>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a54      	ldr	r2, [pc, #336]	; (80011c8 <HAL_GPIO_Init+0x33c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d01f      	beq.n	80010ba <HAL_GPIO_Init+0x22e>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a53      	ldr	r2, [pc, #332]	; (80011cc <HAL_GPIO_Init+0x340>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d019      	beq.n	80010b6 <HAL_GPIO_Init+0x22a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a52      	ldr	r2, [pc, #328]	; (80011d0 <HAL_GPIO_Init+0x344>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0x226>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a51      	ldr	r2, [pc, #324]	; (80011d4 <HAL_GPIO_Init+0x348>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d00d      	beq.n	80010ae <HAL_GPIO_Init+0x222>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a50      	ldr	r2, [pc, #320]	; (80011d8 <HAL_GPIO_Init+0x34c>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x21e>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_GPIO_Init+0x350>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_GPIO_Init+0x21a>
 80010a2:	2309      	movs	r3, #9
 80010a4:	e012      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010a6:	230a      	movs	r3, #10
 80010a8:	e010      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010aa:	2308      	movs	r3, #8
 80010ac:	e00e      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010ae:	2307      	movs	r3, #7
 80010b0:	e00c      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010b2:	2306      	movs	r3, #6
 80010b4:	e00a      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010b6:	2305      	movs	r3, #5
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x240>
 80010ca:	2300      	movs	r3, #0
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	f002 0203 	and.w	r2, r2, #3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	4935      	ldr	r1, [pc, #212]	; (80011b4 <HAL_GPIO_Init+0x328>)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <HAL_GPIO_Init+0x354>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110e:	4a34      	ldr	r2, [pc, #208]	; (80011e0 <HAL_GPIO_Init+0x354>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001114:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <HAL_GPIO_Init+0x354>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001138:	4a29      	ldr	r2, [pc, #164]	; (80011e0 <HAL_GPIO_Init+0x354>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <HAL_GPIO_Init+0x354>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001162:	4a1f      	ldr	r2, [pc, #124]	; (80011e0 <HAL_GPIO_Init+0x354>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_GPIO_Init+0x354>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118c:	4a14      	ldr	r2, [pc, #80]	; (80011e0 <HAL_GPIO_Init+0x354>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3301      	adds	r3, #1
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	f67f ae84 	bls.w	8000ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40013800 	.word	0x40013800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40021400 	.word	0x40021400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40021c00 	.word	0x40021c00
 80011d8:	40022000 	.word	0x40022000
 80011dc:	40022400 	.word	0x40022400
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001200:	e003      	b.n	800120a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	041a      	lsls	r2, r3, #16
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	619a      	str	r2, [r3, #24]
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e12b      	b.n	8001482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fb6e 	bl	8000920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2224      	movs	r2, #36	; 0x24
 8001248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800126a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800127a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800127c:	f001 faa6 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8001280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4a81      	ldr	r2, [pc, #516]	; (800148c <HAL_I2C_Init+0x274>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d807      	bhi.n	800129c <HAL_I2C_Init+0x84>
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4a80      	ldr	r2, [pc, #512]	; (8001490 <HAL_I2C_Init+0x278>)
 8001290:	4293      	cmp	r3, r2
 8001292:	bf94      	ite	ls
 8001294:	2301      	movls	r3, #1
 8001296:	2300      	movhi	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	e006      	b.n	80012aa <HAL_I2C_Init+0x92>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a7d      	ldr	r2, [pc, #500]	; (8001494 <HAL_I2C_Init+0x27c>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	bf94      	ite	ls
 80012a4:	2301      	movls	r3, #1
 80012a6:	2300      	movhi	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0e7      	b.n	8001482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4a78      	ldr	r2, [pc, #480]	; (8001498 <HAL_I2C_Init+0x280>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	68ba      	ldr	r2, [r7, #8]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a6a      	ldr	r2, [pc, #424]	; (800148c <HAL_I2C_Init+0x274>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d802      	bhi.n	80012ec <HAL_I2C_Init+0xd4>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	3301      	adds	r3, #1
 80012ea:	e009      	b.n	8001300 <HAL_I2C_Init+0xe8>
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012f2:	fb02 f303 	mul.w	r3, r2, r3
 80012f6:	4a69      	ldr	r2, [pc, #420]	; (800149c <HAL_I2C_Init+0x284>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	099b      	lsrs	r3, r3, #6
 80012fe:	3301      	adds	r3, #1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	430b      	orrs	r3, r1
 8001306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	495c      	ldr	r1, [pc, #368]	; (800148c <HAL_I2C_Init+0x274>)
 800131c:	428b      	cmp	r3, r1
 800131e:	d819      	bhi.n	8001354 <HAL_I2C_Init+0x13c>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	1e59      	subs	r1, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	fbb1 f3f3 	udiv	r3, r1, r3
 800132e:	1c59      	adds	r1, r3, #1
 8001330:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001334:	400b      	ands	r3, r1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00a      	beq.n	8001350 <HAL_I2C_Init+0x138>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1e59      	subs	r1, r3, #1
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fbb1 f3f3 	udiv	r3, r1, r3
 8001348:	3301      	adds	r3, #1
 800134a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134e:	e051      	b.n	80013f4 <HAL_I2C_Init+0x1dc>
 8001350:	2304      	movs	r3, #4
 8001352:	e04f      	b.n	80013f4 <HAL_I2C_Init+0x1dc>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d111      	bne.n	8001380 <HAL_I2C_Init+0x168>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	1e58      	subs	r0, r3, #1
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6859      	ldr	r1, [r3, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	440b      	add	r3, r1
 800136a:	fbb0 f3f3 	udiv	r3, r0, r3
 800136e:	3301      	adds	r3, #1
 8001370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	e012      	b.n	80013a6 <HAL_I2C_Init+0x18e>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1e58      	subs	r0, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6859      	ldr	r1, [r3, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	0099      	lsls	r1, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	fbb0 f3f3 	udiv	r3, r0, r3
 8001396:	3301      	adds	r3, #1
 8001398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800139c:	2b00      	cmp	r3, #0
 800139e:	bf0c      	ite	eq
 80013a0:	2301      	moveq	r3, #1
 80013a2:	2300      	movne	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_I2C_Init+0x196>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e022      	b.n	80013f4 <HAL_I2C_Init+0x1dc>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10e      	bne.n	80013d4 <HAL_I2C_Init+0x1bc>
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1e58      	subs	r0, r3, #1
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6859      	ldr	r1, [r3, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	440b      	add	r3, r1
 80013c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d2:	e00f      	b.n	80013f4 <HAL_I2C_Init+0x1dc>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1e58      	subs	r0, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	0099      	lsls	r1, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ea:	3301      	adds	r3, #1
 80013ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	6809      	ldr	r1, [r1, #0]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6911      	ldr	r1, [r2, #16]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68d2      	ldr	r2, [r2, #12]
 800142e:	4311      	orrs	r1, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6812      	ldr	r2, [r2, #0]
 8001434:	430b      	orrs	r3, r1
 8001436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695a      	ldr	r2, [r3, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2220      	movs	r2, #32
 800146e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	000186a0 	.word	0x000186a0
 8001490:	001e847f 	.word	0x001e847f
 8001494:	003d08ff 	.word	0x003d08ff
 8001498:	431bde83 	.word	0x431bde83
 800149c:	10624dd3 	.word	0x10624dd3

080014a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08c      	sub	sp, #48	; 0x30
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	4608      	mov	r0, r1
 80014aa:	4611      	mov	r1, r2
 80014ac:	461a      	mov	r2, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	817b      	strh	r3, [r7, #10]
 80014b2:	460b      	mov	r3, r1
 80014b4:	813b      	strh	r3, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014ba:	f7ff fbd1 	bl	8000c60 <HAL_GetTick>
 80014be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b20      	cmp	r3, #32
 80014ca:	f040 8208 	bne.w	80018de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2319      	movs	r3, #25
 80014d4:	2201      	movs	r2, #1
 80014d6:	497b      	ldr	r1, [pc, #492]	; (80016c4 <HAL_I2C_Mem_Read+0x224>)
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 faef 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80014e4:	2302      	movs	r3, #2
 80014e6:	e1fb      	b.n	80018e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_I2C_Mem_Read+0x56>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e1f4      	b.n	80018e0 <HAL_I2C_Mem_Read+0x440>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b01      	cmp	r3, #1
 800150a:	d007      	beq.n	800151c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800152a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2222      	movs	r2, #34	; 0x22
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2240      	movs	r2, #64	; 0x40
 8001538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800154c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4a5b      	ldr	r2, [pc, #364]	; (80016c8 <HAL_I2C_Mem_Read+0x228>)
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800155e:	88f8      	ldrh	r0, [r7, #6]
 8001560:	893a      	ldrh	r2, [r7, #8]
 8001562:	8979      	ldrh	r1, [r7, #10]
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4603      	mov	r3, r0
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f000 f9bc 	bl	80018ec <I2C_RequestMemoryRead>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e1b0      	b.n	80018e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001582:	2b00      	cmp	r3, #0
 8001584:	d113      	bne.n	80015ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	623b      	str	r3, [r7, #32]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	623b      	str	r3, [r7, #32]
 800159a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e184      	b.n	80018b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d11b      	bne.n	80015ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	e164      	b.n	80018b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d11b      	bne.n	800162e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001604:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001614:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	e144      	b.n	80018b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001644:	e138      	b.n	80018b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	2b03      	cmp	r3, #3
 800164c:	f200 80f1 	bhi.w	8001832 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001654:	2b01      	cmp	r3, #1
 8001656:	d123      	bne.n	80016a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 fb44 	bl	8001cea <I2C_WaitOnRXNEFlagUntilTimeout>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e139      	b.n	80018e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800169e:	e10b      	b.n	80018b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d14e      	bne.n	8001746 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ae:	2200      	movs	r2, #0
 80016b0:	4906      	ldr	r1, [pc, #24]	; (80016cc <HAL_I2C_Mem_Read+0x22c>)
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 fa02 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e10e      	b.n	80018e0 <HAL_I2C_Mem_Read+0x440>
 80016c2:	bf00      	nop
 80016c4:	00100002 	.word	0x00100002
 80016c8:	ffff0000 	.word	0xffff0000
 80016cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001708:	b29b      	uxth	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001744:	e0b8      	b.n	80018b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800174c:	2200      	movs	r2, #0
 800174e:	4966      	ldr	r1, [pc, #408]	; (80018e8 <HAL_I2C_Mem_Read+0x448>)
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f000 f9b3 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0bf      	b.n	80018e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800176e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017a8:	2200      	movs	r2, #0
 80017aa:	494f      	ldr	r1, [pc, #316]	; (80018e8 <HAL_I2C_Mem_Read+0x448>)
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f985 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e091      	b.n	80018e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001826:	b29b      	uxth	r3, r3
 8001828:	3b01      	subs	r3, #1
 800182a:	b29a      	uxth	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001830:	e042      	b.n	80018b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001834:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 fa57 	bl	8001cea <I2C_WaitOnRXNEFlagUntilTimeout>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e04c      	b.n	80018e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001862:	3b01      	subs	r3, #1
 8001864:	b29a      	uxth	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186e:	b29b      	uxth	r3, r3
 8001870:	3b01      	subs	r3, #1
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b04      	cmp	r3, #4
 8001884:	d118      	bne.n	80018b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	b2d2      	uxtb	r2, r2
 8001892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f47f aec2 	bne.w	8001646 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2220      	movs	r2, #32
 80018c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80018de:	2302      	movs	r3, #2
  }
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3728      	adds	r7, #40	; 0x28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	00010004 	.word	0x00010004

080018ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	817b      	strh	r3, [r7, #10]
 80018fe:	460b      	mov	r3, r1
 8001900:	813b      	strh	r3, [r7, #8]
 8001902:	4613      	mov	r3, r2
 8001904:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001914:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001924:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	2200      	movs	r2, #0
 800192e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f8c2 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00d      	beq.n	800195a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194c:	d103      	bne.n	8001956 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e0aa      	b.n	8001ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800195a:	897b      	ldrh	r3, [r7, #10]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001968:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	6a3a      	ldr	r2, [r7, #32]
 800196e:	4952      	ldr	r1, [pc, #328]	; (8001ab8 <I2C_RequestMemoryRead+0x1cc>)
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f8fa 	bl	8001b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e097      	b.n	8001ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	6a39      	ldr	r1, [r7, #32]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f964 	bl	8001c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00d      	beq.n	80019c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d107      	bne.n	80019be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e076      	b.n	8001ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d105      	bne.n	80019d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019c8:	893b      	ldrh	r3, [r7, #8]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	611a      	str	r2, [r3, #16]
 80019d2:	e021      	b.n	8001a18 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019d4:	893b      	ldrh	r3, [r7, #8]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f93e 	bl	8001c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00d      	beq.n	8001a0e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	d107      	bne.n	8001a0a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e050      	b.n	8001ab0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a0e:	893b      	ldrh	r3, [r7, #8]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1a:	6a39      	ldr	r1, [r7, #32]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f923 	bl	8001c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00d      	beq.n	8001a44 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d107      	bne.n	8001a40 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e035      	b.n	8001ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a52:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	6a3b      	ldr	r3, [r7, #32]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 f82b 	bl	8001abc <I2C_WaitOnFlagUntilTimeout>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00d      	beq.n	8001a88 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a7a:	d103      	bne.n	8001a84 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e013      	b.n	8001ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a88:	897b      	ldrh	r3, [r7, #10]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	6a3a      	ldr	r2, [r7, #32]
 8001a9c:	4906      	ldr	r1, [pc, #24]	; (8001ab8 <I2C_RequestMemoryRead+0x1cc>)
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f863 	bl	8001b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	00010002 	.word	0x00010002

08001abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001acc:	e025      	b.n	8001b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d021      	beq.n	8001b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad6:	f7ff f8c3 	bl	8000c60 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d302      	bcc.n	8001aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d116      	bne.n	8001b1a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f043 0220 	orr.w	r2, r3, #32
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e023      	b.n	8001b62 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10d      	bne.n	8001b40 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf0c      	ite	eq
 8001b36:	2301      	moveq	r3, #1
 8001b38:	2300      	movne	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	e00c      	b.n	8001b5a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf0c      	ite	eq
 8001b52:	2301      	moveq	r3, #1
 8001b54:	2300      	movne	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d0b6      	beq.n	8001ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b78:	e051      	b.n	8001c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b88:	d123      	bne.n	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b98:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ba2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f043 0204 	orr.w	r2, r3, #4
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e046      	b.n	8001c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d021      	beq.n	8001c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bda:	f7ff f841 	bl	8000c60 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d302      	bcc.n	8001bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d116      	bne.n	8001c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f043 0220 	orr.w	r2, r3, #32
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e020      	b.n	8001c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10c      	bne.n	8001c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4013      	ands	r3, r2
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	e00b      	b.n	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	43da      	mvns	r2, r3
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d18d      	bne.n	8001b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c74:	e02d      	b.n	8001cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f88d 	bl	8001d96 <I2C_IsAcknowledgeFailed>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e02d      	b.n	8001ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d021      	beq.n	8001cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8e:	f7fe ffe7 	bl	8000c60 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d302      	bcc.n	8001ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d116      	bne.n	8001cd2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f043 0220 	orr.w	r2, r3, #32
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e007      	b.n	8001ce2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cdc:	2b80      	cmp	r3, #128	; 0x80
 8001cde:	d1ca      	bne.n	8001c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b084      	sub	sp, #16
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cf6:	e042      	b.n	8001d7e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d119      	bne.n	8001d3a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f06f 0210 	mvn.w	r2, #16
 8001d0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e029      	b.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3a:	f7fe ff91 	bl	8000c60 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d302      	bcc.n	8001d50 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d116      	bne.n	8001d7e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f043 0220 	orr.w	r2, r3, #32
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e007      	b.n	8001d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d88:	2b40      	cmp	r3, #64	; 0x40
 8001d8a:	d1b5      	bne.n	8001cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dac:	d11b      	bne.n	8001de6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001db6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f043 0204 	orr.w	r2, r3, #4
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	d129      	bne.n	8001e5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2224      	movs	r2, #36	; 0x24
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0201 	bic.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0210 	bic.w	r2, r2, #16
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e000      	b.n	8001e60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001e5e:	2302      	movs	r3, #2
  }
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001e76:	2300      	movs	r3, #0
 8001e78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b20      	cmp	r3, #32
 8001e84:	d12a      	bne.n	8001edc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2224      	movs	r2, #36	; 0x24
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0201 	bic.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001ea6:	89fb      	ldrh	r3, [r7, #14]
 8001ea8:	f023 030f 	bic.w	r3, r3, #15
 8001eac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	89fb      	ldrh	r3, [r7, #14]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	89fa      	ldrh	r2, [r7, #14]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e000      	b.n	8001ede <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
  }
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e267      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d075      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f0a:	4b88      	ldr	r3, [pc, #544]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d00c      	beq.n	8001f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f16:	4b85      	ldr	r3, [pc, #532]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d112      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f22:	4b82      	ldr	r3, [pc, #520]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2e:	d10b      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f30:	4b7e      	ldr	r3, [pc, #504]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d05b      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x108>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d157      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e242      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f50:	d106      	bne.n	8001f60 <HAL_RCC_OscConfig+0x74>
 8001f52:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a75      	ldr	r2, [pc, #468]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	e01d      	b.n	8001f9c <HAL_RCC_OscConfig+0xb0>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x98>
 8001f6a:	4b70      	ldr	r3, [pc, #448]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a6f      	ldr	r2, [pc, #444]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b6d      	ldr	r3, [pc, #436]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6c      	ldr	r2, [pc, #432]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e00b      	b.n	8001f9c <HAL_RCC_OscConfig+0xb0>
 8001f84:	4b69      	ldr	r3, [pc, #420]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a68      	ldr	r2, [pc, #416]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	4b66      	ldr	r3, [pc, #408]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a65      	ldr	r2, [pc, #404]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fe5c 	bl	8000c60 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fac:	f7fe fe58 	bl	8000c60 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e207      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0xc0>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fe48 	bl	8000c60 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd4:	f7fe fe44 	bl	8000c60 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b64      	cmp	r3, #100	; 0x64
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1f3      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	4b51      	ldr	r3, [pc, #324]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xe8>
 8001ff2:	e000      	b.n	8001ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d063      	beq.n	80020ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002002:	4b4a      	ldr	r3, [pc, #296]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00b      	beq.n	8002026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002016:	2b08      	cmp	r3, #8
 8002018:	d11c      	bne.n	8002054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201a:	4b44      	ldr	r3, [pc, #272]	; (800212c <HAL_RCC_OscConfig+0x240>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_RCC_OscConfig+0x152>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d001      	beq.n	800203e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e1c7      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4937      	ldr	r1, [pc, #220]	; (800212c <HAL_RCC_OscConfig+0x240>)
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002052:	e03a      	b.n	80020ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_RCC_OscConfig+0x244>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7fe fdfd 	bl	8000c60 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800206a:	f7fe fdf9 	bl	8000c60 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e1a8      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_OscConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_RCC_OscConfig+0x240>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4925      	ldr	r1, [pc, #148]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_OscConfig+0x244>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe fddc 	bl	8000c60 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ac:	f7fe fdd8 	bl	8000c60 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e187      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCC_OscConfig+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d036      	beq.n	8002144 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d016      	beq.n	800210c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <HAL_RCC_OscConfig+0x248>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7fe fdbc 	bl	8000c60 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ec:	f7fe fdb8 	bl	8000c60 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e167      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_OscConfig+0x240>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x200>
 800210a:	e01b      	b.n	8002144 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_OscConfig+0x248>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe fda5 	bl	8000c60 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002118:	e00e      	b.n	8002138 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211a:	f7fe fda1 	bl	8000c60 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d907      	bls.n	8002138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e150      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
 800212c:	40023800 	.word	0x40023800
 8002130:	42470000 	.word	0x42470000
 8002134:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	4b88      	ldr	r3, [pc, #544]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ea      	bne.n	800211a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8097 	beq.w	8002280 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b81      	ldr	r3, [pc, #516]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10f      	bne.n	8002182 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	4b7d      	ldr	r3, [pc, #500]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a7c      	ldr	r2, [pc, #496]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b7a      	ldr	r3, [pc, #488]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b77      	ldr	r3, [pc, #476]	; (8002360 <HAL_RCC_OscConfig+0x474>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d118      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218e:	4b74      	ldr	r3, [pc, #464]	; (8002360 <HAL_RCC_OscConfig+0x474>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a73      	ldr	r2, [pc, #460]	; (8002360 <HAL_RCC_OscConfig+0x474>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219a:	f7fe fd61 	bl	8000c60 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7fe fd5d 	bl	8000c60 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e10c      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	4b6a      	ldr	r3, [pc, #424]	; (8002360 <HAL_RCC_OscConfig+0x474>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2ea>
 80021c8:	4b64      	ldr	r3, [pc, #400]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a63      	ldr	r2, [pc, #396]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
 80021d4:	e01c      	b.n	8002210 <HAL_RCC_OscConfig+0x324>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b05      	cmp	r3, #5
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x30c>
 80021de:	4b5f      	ldr	r3, [pc, #380]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ea:	4b5c      	ldr	r3, [pc, #368]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a5b      	ldr	r2, [pc, #364]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0x324>
 80021f8:	4b58      	ldr	r3, [pc, #352]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	4b55      	ldr	r3, [pc, #340]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a54      	ldr	r2, [pc, #336]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800220a:	f023 0304 	bic.w	r3, r3, #4
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d015      	beq.n	8002244 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe fd22 	bl	8000c60 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002220:	f7fe fd1e 	bl	8000c60 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0cb      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002236:	4b49      	ldr	r3, [pc, #292]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0ee      	beq.n	8002220 <HAL_RCC_OscConfig+0x334>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7fe fd0c 	bl	8000c60 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224a:	e00a      	b.n	8002262 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7fe fd08 	bl	8000c60 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0b5      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002262:	4b3e      	ldr	r3, [pc, #248]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ee      	bne.n	800224c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002274:	4b39      	ldr	r3, [pc, #228]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a38      	ldr	r2, [pc, #224]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800227a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a1 	beq.w	80023cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800228a:	4b34      	ldr	r3, [pc, #208]	; (800235c <HAL_RCC_OscConfig+0x470>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b08      	cmp	r3, #8
 8002294:	d05c      	beq.n	8002350 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d141      	bne.n	8002322 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_OscConfig+0x478>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fcdc 	bl	8000c60 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe fcd8 	bl	8000c60 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e087      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	4b27      	ldr	r3, [pc, #156]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69da      	ldr	r2, [r3, #28]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	3b01      	subs	r3, #1
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	491b      	ldr	r1, [pc, #108]	; (800235c <HAL_RCC_OscConfig+0x470>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_RCC_OscConfig+0x478>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fa:	f7fe fcb1 	bl	8000c60 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002302:	f7fe fcad 	bl	8000c60 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e05c      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x416>
 8002320:	e054      	b.n	80023cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_RCC_OscConfig+0x478>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe fc9a 	bl	8000c60 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fc96 	bl	8000c60 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e045      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_OscConfig+0x470>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x444>
 800234e:	e03d      	b.n	80023cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e038      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
 800235c:	40023800 	.word	0x40023800
 8002360:	40007000 	.word	0x40007000
 8002364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_RCC_OscConfig+0x4ec>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d028      	beq.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d121      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d11a      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800239e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d111      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	3b01      	subs	r3, #1
 80023b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d107      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0cc      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d90c      	bls.n	8002418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800243a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d044      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d119      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d003      	beq.n	800249a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002496:	2b03      	cmp	r3, #3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e067      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4934      	ldr	r1, [pc, #208]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fbc8 	bl	8000c60 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7fe fbc4 	bl	8000c60 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e04f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d20c      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002562:	f000 f821 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	490a      	ldr	r1, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	5ccb      	ldrb	r3, [r1, r3]
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fb28 	bl	8000bd8 <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	08003018 	.word	0x08003018
 80025a0:	20000004 	.word	0x20000004
 80025a4:	20000008 	.word	0x20000008

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ac:	b094      	sub	sp, #80	; 0x50
 80025ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	647b      	str	r3, [r7, #68]	; 0x44
 80025b4:	2300      	movs	r3, #0
 80025b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b8:	2300      	movs	r3, #0
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025c0:	4b79      	ldr	r3, [pc, #484]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	d00d      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x40>
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	f200 80e1 	bhi.w	8002794 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x34>
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d003      	beq.n	80025e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025da:	e0db      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025dc:	4b73      	ldr	r3, [pc, #460]	; (80027ac <HAL_RCC_GetSysClockFreq+0x204>)
 80025de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025e0:	e0db      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025e2:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80025e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025e6:	e0d8      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e8:	4b6f      	ldr	r3, [pc, #444]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025f2:	4b6d      	ldr	r3, [pc, #436]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d063      	beq.n	80026c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fe:	4b6a      	ldr	r3, [pc, #424]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	099b      	lsrs	r3, r3, #6
 8002604:	2200      	movs	r2, #0
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
 8002608:	63fa      	str	r2, [r7, #60]	; 0x3c
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
 8002612:	2300      	movs	r3, #0
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
 8002616:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800261a:	4622      	mov	r2, r4
 800261c:	462b      	mov	r3, r5
 800261e:	f04f 0000 	mov.w	r0, #0
 8002622:	f04f 0100 	mov.w	r1, #0
 8002626:	0159      	lsls	r1, r3, #5
 8002628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800262c:	0150      	lsls	r0, r2, #5
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4621      	mov	r1, r4
 8002634:	1a51      	subs	r1, r2, r1
 8002636:	6139      	str	r1, [r7, #16]
 8002638:	4629      	mov	r1, r5
 800263a:	eb63 0301 	sbc.w	r3, r3, r1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800264c:	4659      	mov	r1, fp
 800264e:	018b      	lsls	r3, r1, #6
 8002650:	4651      	mov	r1, sl
 8002652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002656:	4651      	mov	r1, sl
 8002658:	018a      	lsls	r2, r1, #6
 800265a:	4651      	mov	r1, sl
 800265c:	ebb2 0801 	subs.w	r8, r2, r1
 8002660:	4659      	mov	r1, fp
 8002662:	eb63 0901 	sbc.w	r9, r3, r1
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	f04f 0300 	mov.w	r3, #0
 800266e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800267a:	4690      	mov	r8, r2
 800267c:	4699      	mov	r9, r3
 800267e:	4623      	mov	r3, r4
 8002680:	eb18 0303 	adds.w	r3, r8, r3
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	462b      	mov	r3, r5
 8002688:	eb49 0303 	adc.w	r3, r9, r3
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800269a:	4629      	mov	r1, r5
 800269c:	024b      	lsls	r3, r1, #9
 800269e:	4621      	mov	r1, r4
 80026a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026a4:	4621      	mov	r1, r4
 80026a6:	024a      	lsls	r2, r1, #9
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ae:	2200      	movs	r2, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026b8:	f7fd fd98 	bl	80001ec <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4613      	mov	r3, r2
 80026c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c4:	e058      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	2200      	movs	r2, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	4611      	mov	r1, r2
 80026d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026d6:	623b      	str	r3, [r7, #32]
 80026d8:	2300      	movs	r3, #0
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
 80026dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026e0:	4642      	mov	r2, r8
 80026e2:	464b      	mov	r3, r9
 80026e4:	f04f 0000 	mov.w	r0, #0
 80026e8:	f04f 0100 	mov.w	r1, #0
 80026ec:	0159      	lsls	r1, r3, #5
 80026ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f2:	0150      	lsls	r0, r2, #5
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4641      	mov	r1, r8
 80026fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80026fe:	4649      	mov	r1, r9
 8002700:	eb63 0b01 	sbc.w	fp, r3, r1
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002710:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002714:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002718:	ebb2 040a 	subs.w	r4, r2, sl
 800271c:	eb63 050b 	sbc.w	r5, r3, fp
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	00eb      	lsls	r3, r5, #3
 800272a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800272e:	00e2      	lsls	r2, r4, #3
 8002730:	4614      	mov	r4, r2
 8002732:	461d      	mov	r5, r3
 8002734:	4643      	mov	r3, r8
 8002736:	18e3      	adds	r3, r4, r3
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	464b      	mov	r3, r9
 800273c:	eb45 0303 	adc.w	r3, r5, r3
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	f04f 0300 	mov.w	r3, #0
 800274a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800274e:	4629      	mov	r1, r5
 8002750:	028b      	lsls	r3, r1, #10
 8002752:	4621      	mov	r1, r4
 8002754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002758:	4621      	mov	r1, r4
 800275a:	028a      	lsls	r2, r1, #10
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002762:	2200      	movs	r2, #0
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	61fa      	str	r2, [r7, #28]
 8002768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800276c:	f7fd fd3e 	bl	80001ec <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4613      	mov	r3, r2
 8002776:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	3301      	adds	r3, #1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800278a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002792:	e002      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800279c:	4618      	mov	r0, r3
 800279e:	3750      	adds	r7, #80	; 0x50
 80027a0:	46bd      	mov	sp, r7
 80027a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	00f42400 	.word	0x00f42400
 80027b0:	007a1200 	.word	0x007a1200

080027b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027d0:	f7ff fff0 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	; (80027f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	08003028 	.word	0x08003028

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027f8:	f7ff ffdc 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0b5b      	lsrs	r3, r3, #13
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	08003028 	.word	0x08003028

0800281c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e03f      	b.n	80028ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe f8b4 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800285e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f929 	bl	8002ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b08a      	sub	sp, #40	; 0x28
 80028ba:	af02      	add	r7, sp, #8
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d17c      	bne.n	80029d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_UART_Transmit+0x2c>
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e075      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_UART_Transmit+0x3e>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e06e      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2221      	movs	r2, #33	; 0x21
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800290a:	f7fe f9a9 	bl	8000c60 <HAL_GetTick>
 800290e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	88fa      	ldrh	r2, [r7, #6]
 8002914:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002924:	d108      	bne.n	8002938 <HAL_UART_Transmit+0x82>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e003      	b.n	8002940 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002948:	e02a      	b.n	80029a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f840 	bl	80029da <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e036      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10b      	bne.n	8002982 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	461a      	mov	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	3302      	adds	r3, #2
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	e007      	b.n	8002992 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	3301      	adds	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002996:	b29b      	uxth	r3, r3
 8002998:	3b01      	subs	r3, #1
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1cf      	bne.n	800294a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2200      	movs	r2, #0
 80029b2:	2140      	movs	r1, #64	; 0x40
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f810 	bl	80029da <UART_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e006      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b090      	sub	sp, #64	; 0x40
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ea:	e050      	b.n	8002a8e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f2:	d04c      	beq.n	8002a8e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x30>
 80029fa:	f7fe f931 	bl	8000c60 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d241      	bcs.n	8002a8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	330c      	adds	r3, #12
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a14:	e853 3f00 	ldrex	r3, [r3]
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a2a:	637a      	str	r2, [r7, #52]	; 0x34
 8002a2c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a32:	e841 2300 	strex	r3, r2, [r1]
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1e5      	bne.n	8002a0a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3314      	adds	r3, #20
 8002a44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3314      	adds	r3, #20
 8002a5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a5e:	623a      	str	r2, [r7, #32]
 8002a60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a62:	69f9      	ldr	r1, [r7, #28]
 8002a64:	6a3a      	ldr	r2, [r7, #32]
 8002a66:	e841 2300 	strex	r3, r2, [r1]
 8002a6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e5      	bne.n	8002a3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e00f      	b.n	8002aae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4013      	ands	r3, r2
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	bf0c      	ite	eq
 8002a9e:	2301      	moveq	r3, #1
 8002aa0:	2300      	movne	r3, #0
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d09f      	beq.n	80029ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3740      	adds	r7, #64	; 0x40
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002abc:	b0c0      	sub	sp, #256	; 0x100
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	68d9      	ldr	r1, [r3, #12]
 8002ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	ea40 0301 	orr.w	r3, r0, r1
 8002ae0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002b10:	f021 010c 	bic.w	r1, r1, #12
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b32:	6999      	ldr	r1, [r3, #24]
 8002b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	ea40 0301 	orr.w	r3, r0, r1
 8002b3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4b8f      	ldr	r3, [pc, #572]	; (8002d84 <UART_SetConfig+0x2cc>)
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d005      	beq.n	8002b58 <UART_SetConfig+0xa0>
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	4b8d      	ldr	r3, [pc, #564]	; (8002d88 <UART_SetConfig+0x2d0>)
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d104      	bne.n	8002b62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b58:	f7ff fe4c 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8002b5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b60:	e003      	b.n	8002b6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b62:	f7ff fe33 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8002b66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b74:	f040 810c 	bne.w	8002d90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b8a:	4622      	mov	r2, r4
 8002b8c:	462b      	mov	r3, r5
 8002b8e:	1891      	adds	r1, r2, r2
 8002b90:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b92:	415b      	adcs	r3, r3
 8002b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	eb12 0801 	adds.w	r8, r2, r1
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	eb43 0901 	adc.w	r9, r3, r1
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bba:	4690      	mov	r8, r2
 8002bbc:	4699      	mov	r9, r3
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	eb18 0303 	adds.w	r3, r8, r3
 8002bc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002bc8:	462b      	mov	r3, r5
 8002bca:	eb49 0303 	adc.w	r3, r9, r3
 8002bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002be2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002be6:	460b      	mov	r3, r1
 8002be8:	18db      	adds	r3, r3, r3
 8002bea:	653b      	str	r3, [r7, #80]	; 0x50
 8002bec:	4613      	mov	r3, r2
 8002bee:	eb42 0303 	adc.w	r3, r2, r3
 8002bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8002bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bfc:	f7fd faf6 	bl	80001ec <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <UART_SetConfig+0x2d4>)
 8002c06:	fba3 2302 	umull	r2, r3, r3, r2
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	011c      	lsls	r4, r3, #4
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002c1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	64b9      	str	r1, [r7, #72]	; 0x48
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002c30:	4641      	mov	r1, r8
 8002c32:	eb12 0a01 	adds.w	sl, r2, r1
 8002c36:	4649      	mov	r1, r9
 8002c38:	eb43 0b01 	adc.w	fp, r3, r1
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c50:	4692      	mov	sl, r2
 8002c52:	469b      	mov	fp, r3
 8002c54:	4643      	mov	r3, r8
 8002c56:	eb1a 0303 	adds.w	r3, sl, r3
 8002c5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	eb4b 0303 	adc.w	r3, fp, r3
 8002c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	18db      	adds	r3, r3, r3
 8002c80:	643b      	str	r3, [r7, #64]	; 0x40
 8002c82:	4613      	mov	r3, r2
 8002c84:	eb42 0303 	adc.w	r3, r2, r3
 8002c88:	647b      	str	r3, [r7, #68]	; 0x44
 8002c8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c92:	f7fd faab 	bl	80001ec <__aeabi_uldivmod>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <UART_SetConfig+0x2d4>)
 8002c9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2264      	movs	r2, #100	; 0x64
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	1acb      	subs	r3, r1, r3
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002cb2:	4b36      	ldr	r3, [pc, #216]	; (8002d8c <UART_SetConfig+0x2d4>)
 8002cb4:	fba3 2302 	umull	r2, r3, r3, r2
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cc0:	441c      	add	r4, r3
 8002cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ccc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002cd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	1851      	adds	r1, r2, r1
 8002ce8:	6339      	str	r1, [r7, #48]	; 0x30
 8002cea:	4649      	mov	r1, r9
 8002cec:	414b      	adcs	r3, r1
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	00cb      	lsls	r3, r1, #3
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d06:	4651      	mov	r1, sl
 8002d08:	00ca      	lsls	r2, r1, #3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4642      	mov	r2, r8
 8002d12:	189b      	adds	r3, r3, r2
 8002d14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d18:	464b      	mov	r3, r9
 8002d1a:	460a      	mov	r2, r1
 8002d1c:	eb42 0303 	adc.w	r3, r2, r3
 8002d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002d30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d38:	460b      	mov	r3, r1
 8002d3a:	18db      	adds	r3, r3, r3
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d3e:	4613      	mov	r3, r2
 8002d40:	eb42 0303 	adc.w	r3, r2, r3
 8002d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d4e:	f7fd fa4d 	bl	80001ec <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <UART_SetConfig+0x2d4>)
 8002d58:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	2164      	movs	r1, #100	; 0x64
 8002d60:	fb01 f303 	mul.w	r3, r1, r3
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	3332      	adds	r3, #50	; 0x32
 8002d6a:	4a08      	ldr	r2, [pc, #32]	; (8002d8c <UART_SetConfig+0x2d4>)
 8002d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	f003 0207 	and.w	r2, r3, #7
 8002d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4422      	add	r2, r4
 8002d7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d80:	e105      	b.n	8002f8e <UART_SetConfig+0x4d6>
 8002d82:	bf00      	nop
 8002d84:	40011000 	.word	0x40011000
 8002d88:	40011400 	.word	0x40011400
 8002d8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d94:	2200      	movs	r2, #0
 8002d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002da2:	4642      	mov	r2, r8
 8002da4:	464b      	mov	r3, r9
 8002da6:	1891      	adds	r1, r2, r2
 8002da8:	6239      	str	r1, [r7, #32]
 8002daa:	415b      	adcs	r3, r3
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
 8002dae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002db2:	4641      	mov	r1, r8
 8002db4:	1854      	adds	r4, r2, r1
 8002db6:	4649      	mov	r1, r9
 8002db8:	eb43 0501 	adc.w	r5, r3, r1
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	00eb      	lsls	r3, r5, #3
 8002dc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dca:	00e2      	lsls	r2, r4, #3
 8002dcc:	4614      	mov	r4, r2
 8002dce:	461d      	mov	r5, r3
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	18e3      	adds	r3, r4, r3
 8002dd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dd8:	464b      	mov	r3, r9
 8002dda:	eb45 0303 	adc.w	r3, r5, r3
 8002dde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002dee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dfe:	4629      	mov	r1, r5
 8002e00:	008b      	lsls	r3, r1, #2
 8002e02:	4621      	mov	r1, r4
 8002e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e08:	4621      	mov	r1, r4
 8002e0a:	008a      	lsls	r2, r1, #2
 8002e0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002e10:	f7fd f9ec 	bl	80001ec <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4b60      	ldr	r3, [pc, #384]	; (8002f9c <UART_SetConfig+0x4e4>)
 8002e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	011c      	lsls	r4, r3, #4
 8002e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002e34:	4642      	mov	r2, r8
 8002e36:	464b      	mov	r3, r9
 8002e38:	1891      	adds	r1, r2, r2
 8002e3a:	61b9      	str	r1, [r7, #24]
 8002e3c:	415b      	adcs	r3, r3
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e44:	4641      	mov	r1, r8
 8002e46:	1851      	adds	r1, r2, r1
 8002e48:	6139      	str	r1, [r7, #16]
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	414b      	adcs	r3, r1
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	00cb      	lsls	r3, r1, #3
 8002e60:	4651      	mov	r1, sl
 8002e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e66:	4651      	mov	r1, sl
 8002e68:	00ca      	lsls	r2, r1, #3
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4642      	mov	r2, r8
 8002e72:	189b      	adds	r3, r3, r2
 8002e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e78:	464b      	mov	r3, r9
 8002e7a:	460a      	mov	r2, r1
 8002e7c:	eb42 0303 	adc.w	r3, r2, r3
 8002e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	008b      	lsls	r3, r1, #2
 8002ea0:	4641      	mov	r1, r8
 8002ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ea6:	4641      	mov	r1, r8
 8002ea8:	008a      	lsls	r2, r1, #2
 8002eaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002eae:	f7fd f99d 	bl	80001ec <__aeabi_uldivmod>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4b39      	ldr	r3, [pc, #228]	; (8002f9c <UART_SetConfig+0x4e4>)
 8002eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	2164      	movs	r1, #100	; 0x64
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	3332      	adds	r3, #50	; 0x32
 8002eca:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <UART_SetConfig+0x4e4>)
 8002ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ed6:	441c      	add	r4, r3
 8002ed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002edc:	2200      	movs	r2, #0
 8002ede:	673b      	str	r3, [r7, #112]	; 0x70
 8002ee0:	677a      	str	r2, [r7, #116]	; 0x74
 8002ee2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ee6:	4642      	mov	r2, r8
 8002ee8:	464b      	mov	r3, r9
 8002eea:	1891      	adds	r1, r2, r2
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	415b      	adcs	r3, r3
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef6:	4641      	mov	r1, r8
 8002ef8:	1851      	adds	r1, r2, r1
 8002efa:	6039      	str	r1, [r7, #0]
 8002efc:	4649      	mov	r1, r9
 8002efe:	414b      	adcs	r3, r1
 8002f00:	607b      	str	r3, [r7, #4]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f0e:	4659      	mov	r1, fp
 8002f10:	00cb      	lsls	r3, r1, #3
 8002f12:	4651      	mov	r1, sl
 8002f14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f18:	4651      	mov	r1, sl
 8002f1a:	00ca      	lsls	r2, r1, #3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4603      	mov	r3, r0
 8002f22:	4642      	mov	r2, r8
 8002f24:	189b      	adds	r3, r3, r2
 8002f26:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f28:	464b      	mov	r3, r9
 8002f2a:	460a      	mov	r2, r1
 8002f2c:	eb42 0303 	adc.w	r3, r2, r3
 8002f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f3c:	667a      	str	r2, [r7, #100]	; 0x64
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	008b      	lsls	r3, r1, #2
 8002f4e:	4641      	mov	r1, r8
 8002f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f54:	4641      	mov	r1, r8
 8002f56:	008a      	lsls	r2, r1, #2
 8002f58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f5c:	f7fd f946 	bl	80001ec <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <UART_SetConfig+0x4e4>)
 8002f66:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2164      	movs	r1, #100	; 0x64
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	3332      	adds	r3, #50	; 0x32
 8002f78:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <UART_SetConfig+0x4e4>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4422      	add	r2, r4
 8002f8c:	609a      	str	r2, [r3, #8]
}
 8002f8e:	bf00      	nop
 8002f90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f94:	46bd      	mov	sp, r7
 8002f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9a:	bf00      	nop
 8002f9c:	51eb851f 	.word	0x51eb851f

08002fa0 <__libc_init_array>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	4d0d      	ldr	r5, [pc, #52]	; (8002fd8 <__libc_init_array+0x38>)
 8002fa4:	4c0d      	ldr	r4, [pc, #52]	; (8002fdc <__libc_init_array+0x3c>)
 8002fa6:	1b64      	subs	r4, r4, r5
 8002fa8:	10a4      	asrs	r4, r4, #2
 8002faa:	2600      	movs	r6, #0
 8002fac:	42a6      	cmp	r6, r4
 8002fae:	d109      	bne.n	8002fc4 <__libc_init_array+0x24>
 8002fb0:	4d0b      	ldr	r5, [pc, #44]	; (8002fe0 <__libc_init_array+0x40>)
 8002fb2:	4c0c      	ldr	r4, [pc, #48]	; (8002fe4 <__libc_init_array+0x44>)
 8002fb4:	f000 f820 	bl	8002ff8 <_init>
 8002fb8:	1b64      	subs	r4, r4, r5
 8002fba:	10a4      	asrs	r4, r4, #2
 8002fbc:	2600      	movs	r6, #0
 8002fbe:	42a6      	cmp	r6, r4
 8002fc0:	d105      	bne.n	8002fce <__libc_init_array+0x2e>
 8002fc2:	bd70      	pop	{r4, r5, r6, pc}
 8002fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc8:	4798      	blx	r3
 8002fca:	3601      	adds	r6, #1
 8002fcc:	e7ee      	b.n	8002fac <__libc_init_array+0xc>
 8002fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fd2:	4798      	blx	r3
 8002fd4:	3601      	adds	r6, #1
 8002fd6:	e7f2      	b.n	8002fbe <__libc_init_array+0x1e>
 8002fd8:	08003038 	.word	0x08003038
 8002fdc:	08003038 	.word	0x08003038
 8002fe0:	08003038 	.word	0x08003038
 8002fe4:	0800303c 	.word	0x0800303c

08002fe8 <memset>:
 8002fe8:	4402      	add	r2, r0
 8002fea:	4603      	mov	r3, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <_init>:
 8002ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffa:	bf00      	nop
 8002ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffe:	bc08      	pop	{r3}
 8003000:	469e      	mov	lr, r3
 8003002:	4770      	bx	lr

08003004 <_fini>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr
